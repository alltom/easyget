--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: c
comment: 
- !ruby/struct:SM::Flow::P 
  body: EventMachine::attach registers a given file descriptor or IO object with the eventloop
- !ruby/struct:SM::Flow::P 
  body: If the handler provided has the functions notify_readable or notify_writable defined, EventMachine will not read or write from the socket, and instead fire the corresponding callback on the handler.
- !ruby/struct:SM::Flow::P 
  body: To detach the file descriptor, use EventMachine::Connection#detach
- !ruby/struct:SM::Flow::H 
  level: 3
  text: Usage Example
- !ruby/struct:SM::Flow::VERB 
  body: "  module SimpleHttpClient\n    def initialize sock\n      @sock = sock\n    end\n\n    def notify_readable\n      header = @sock.readline\n\n      if header == &quot;\\r\\n&quot;\n        # detach returns the file descriptor number (fd == @sock.fileno)\n        fd = detach\n      end\n    rescue EOFError\n      detach\n    end\n\n    def unbind\n      EM.next_tick do\n        # socket is detached from the eventloop, but still open\n        data = @sock.read\n      end\n    end\n  end\n\n  EM.run{\n    $sock = TCPSocket.new('site.com', 80)\n    $sock.write(&quot;GET / HTTP/1.0\\r\\n\\r\\n&quot;)\n    EM.attach $sock, SimpleHttpClient, $sock\n  }\n"
full_name: EventMachine::attach
is_singleton: true
name: attach
params: (io, handler=nil, *args) {|c| ...}
visibility: public
