--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: "Call #start_tls at any point to initiate TLS encryption on connected streams. The method is smart enough to know whether it should perform a server-side or a client-side handshake. An appropriate place to call #start_tls is in your redefined #post_init method, or in the #connection_completed handler for an outbound connection."
- !ruby/struct:SM::Flow::P 
  body: "#start_tls takes an optional parameter hash that allows you to specify certificate and other options to be used with this Connection object. Here are the currently-supported options: :cert_chain_file : takes a String, which is interpreted as the name of a readable file in the"
- !ruby/struct:SM::Flow::VERB 
  body: "  local filesystem. The file is expected to contain a chain of X509 certificates in\n  PEM format, with the most-resolved certificate at the top of the file, successive\n  intermediate certs in the middle, and the root (or CA) cert at the bottom.\n"
- !ruby/struct:SM::Flow::P 
  body: ":private_key_file : tales a String, which is interpreted as the name of a readable file in the"
- !ruby/struct:SM::Flow::VERB 
  body: "  local filesystem. The file must contain a private key in PEM format.\n"
full_name: EventMachine::Connection#start_tls
is_singleton: false
name: start_tls
params: (args={})
visibility: public
