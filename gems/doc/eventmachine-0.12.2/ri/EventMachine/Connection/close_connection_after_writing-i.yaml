--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: EventMachine::Connection#close_connection_after_writing is a variant of close_connection. All of the descriptive comments given for close_connection also apply to close_connection_after_writing, <em>with one exception:</em> If the connection has outbound data sent using send_dat but which has not yet been sent across the network, close_connection_after_writing will schedule the connection to be closed <em>after</em> all of the outbound data has been safely written to the remote peer.
- !ruby/struct:SM::Flow::P 
  body: Depending on the amount of outgoing data and the speed of the network, considerable time may elapse between your call to close_connection_after_writing and the actual closing of the socket (at which time the unbind callback will be called by the event loop). During this time, you <em>may not</em> call send_data to transmit additional data (that is, the connection is closed for further writes). In very rare cases, you may experience a receive_data callback after your call to close_connection_after_writing, depending on whether incoming data was in the process of being received on the connection at the moment when you called close_connection_after_writing. Your protocol handler must be prepared to properly deal with such data (probably by ignoring it).
full_name: EventMachine::Connection#close_connection_after_writing
is_singleton: false
name: close_connection_after_writing
params: ()
visibility: public
