--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: EXPERIMENTAL. Added the reconnect methods, which may go away.
  name: signature
  rw: RW
class_methods: []

comment: 
- !ruby/struct:SM::Flow::P 
  body: EventMachine::Connection is a class that is instantiated by EventMachine's processing loop whenever a new connection is created. (New connections can be either initiated locally to a remote server or accepted locally from a remote client.) When a Connection object is instantiated, it <em>mixes in</em> the functionality contained in the user-defined module specified in calls to EventMachine#connect or EventMachine#start_server. User-defined handler modules may redefine any or all of the standard methods defined here, as well as add arbitrary additional code that will also be mixed in.
- !ruby/struct:SM::Flow::P 
  body: EventMachine manages one object inherited from EventMachine::Connection (and containing the mixed-in user code) for every network connection that is active at any given time. The event loop will automatically call methods on EventMachine::Connection objects whenever specific events occur on the corresponding connections, as described below.
- !ruby/struct:SM::Flow::P 
  body: "This class is never instantiated by user code, and does not publish an initialize method. The instance methods of EventMachine::Connection which may be called by the event loop are: post_init, receive_data, and unbind. All of the other instance methods defined here are called only by user code."
constants: []

full_name: EventMachine::Connection
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: associate_callback_target
- !ruby/object:RI::MethodSummary 
  name: close_connection
- !ruby/object:RI::MethodSummary 
  name: close_connection_after_writing
- !ruby/object:RI::MethodSummary 
  name: comm_inactivity_timeout
- !ruby/object:RI::MethodSummary 
  name: comm_inactivity_timeout=
- !ruby/object:RI::MethodSummary 
  name: connection_completed
- !ruby/object:RI::MethodSummary 
  name: detach
- !ruby/object:RI::MethodSummary 
  name: error?
- !ruby/object:RI::MethodSummary 
  name: get_outbound_data_size
- !ruby/object:RI::MethodSummary 
  name: get_peername
- !ruby/object:RI::MethodSummary 
  name: get_pid
- !ruby/object:RI::MethodSummary 
  name: get_sockname
- !ruby/object:RI::MethodSummary 
  name: get_status
- !ruby/object:RI::MethodSummary 
  name: post_init
- !ruby/object:RI::MethodSummary 
  name: receive_data
- !ruby/object:RI::MethodSummary 
  name: reconnect
- !ruby/object:RI::MethodSummary 
  name: send_data
- !ruby/object:RI::MethodSummary 
  name: send_datagram
- !ruby/object:RI::MethodSummary 
  name: send_file_data
- !ruby/object:RI::MethodSummary 
  name: set_comm_inactivity_timeout
- !ruby/object:RI::MethodSummary 
  name: start_tls
- !ruby/object:RI::MethodSummary 
  name: stream_file_data
- !ruby/object:RI::MethodSummary 
  name: unbind
name: Connection
superclass: Object
