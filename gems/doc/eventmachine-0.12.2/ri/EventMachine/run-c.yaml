--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: EventMachine::run initializes and runs an event loop. This method only returns if user-callback code calls stop_event_loop. Use the supplied block to define your clients and servers. The block is called by EventMachine::run immediately after initializing its internal event loop but <em>before</em> running the loop. Therefore this block is the right place to call start_server if you want to accept connections from remote clients.
- !ruby/struct:SM::Flow::P 
  body: For programs that are structured as servers, it's usually appropriate to start an event loop by calling EventMachine::run, and let it run forever. It's also possible to use EventMachine::run to make a single client-connection to a remote server, process the data flow from that single connection, and then call stop_event_loop to force EventMachine::run to return. Your program will then continue from the point immediately following the call to EventMachine::run.
- !ruby/struct:SM::Flow::P 
  body: You can of course do both client and servers simultaneously in the same program. One of the strengths of the event-driven programming model is that the handling of network events on many different connections will be interleaved, and scheduled according to the actual events themselves. This maximizes efficiency.
- !ruby/struct:SM::Flow::H 
  level: 3
  text: Server usage example
- !ruby/struct:SM::Flow::P 
  body: See the text at the top of this file for an example of an echo server.
- !ruby/struct:SM::Flow::H 
  level: 3
  text: Client usage example
- !ruby/struct:SM::Flow::P 
  body: See the description of stop_event_loop for an extremely simple client example.
full_name: EventMachine::run
is_singleton: true
name: run
params: (blk=nil, tail=nil, &block)
visibility: public
