--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Application (Rack adapter) called with the request that produces the response.
  name: app
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Backend handling the connections to the clients.
  name: backend
  rw: RW
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
- !ruby/object:RI::MethodSummary 
  name: start
comment: 
- !ruby/struct:SM::Flow::P 
  body: The uterly famous Thin HTTP server. It listen for incoming request through a given <tt>backend</tt> and forward all request to <tt>app</tt>.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: TCP server
- !ruby/struct:SM::Flow::P 
  body: Create a new TCP server on bound to <tt>host:port</tt> by specifiying <tt>host</tt> and <tt>port</tt> as the first 2 arguments.
- !ruby/struct:SM::Flow::VERB 
  body: "  Thin::Server.start('0.0.0.0', 3000, app)\n"
- !ruby/struct:SM::Flow::H 
  level: 2
  text: UNIX domain server
- !ruby/struct:SM::Flow::P 
  body: "Create a new UNIX domain socket bound to <tt>socket</tt> file by specifiying a filename as the first argument. Eg.: /tmp/thin.sock. If the first argument contains a <tt>/</tt> it will be assumed to be a UNIX socket."
- !ruby/struct:SM::Flow::VERB 
  body: "  Thin::Server.start('/tmp/thin.sock', app)\n"
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Using a custom backend
- !ruby/struct:SM::Flow::P 
  body: You can implement your own way to connect the server to its client by creating your own Backend class and pass it as the :backend option.
- !ruby/struct:SM::Flow::VERB 
  body: "  Thin::Server.start('galaxy://faraway', 1345, app, :backend =&gt; Thin::Backends::MyFancyBackend)\n"
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Rack application (<tt>app</tt>)
- !ruby/struct:SM::Flow::P 
  body: All requests will be processed through <tt>app</tt> that must be a valid Rack adapter. A valid Rack adapter (application) must respond to <tt>call(env#Hash)</tt> and return an array of <tt>[status, headers, body]</tt>.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Building an app in place
- !ruby/struct:SM::Flow::P 
  body: "If a block is passed, a <tt>Rack::Builder</tt> instance will be passed to build the <tt>app</tt>. So you can do cool stuff like this:"
- !ruby/struct:SM::Flow::VERB 
  body: "  Thin::Server.start('0.0.0.0', 3000) do\n    use Rack::CommonLogger\n    use Rack::ShowExceptions\n    map &quot;/lobster&quot; do\n      use Rack::Lint\n      run Rack::Lobster.new\n    end\n  end\n"
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Controlling with signals
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "QUIT: Gracefull shutdown (see Server#stop)"
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: "INT and TERM: Force shutdown (see Server#stop!)"
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: Disable signals by passing <tt>:signals =&gt; false</tt>
constants: 
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Default values
  name: DEFAULT_TIMEOUT
  value: "30"
- !ruby/object:RI::Constant 
  comment: 
  name: DEFAULT_HOST
  value: "'0.0.0.0'"
- !ruby/object:RI::Constant 
  comment: 
  name: DEFAULT_PORT
  value: "3000"
- !ruby/object:RI::Constant 
  comment: 
  name: DEFAULT_MAXIMUM_CONNECTIONS
  value: "1024"
- !ruby/object:RI::Constant 
  comment: 
  name: DEFAULT_MAXIMUM_PERSISTENT_CONNECTIONS
  value: "512"
full_name: Thin::Server
includes: 
- !ruby/object:RI::IncludedModule 
  name: Logging
- !ruby/object:RI::IncludedModule 
  name: Daemonizable
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: config
- !ruby/object:RI::MethodSummary 
  name: load_cgi_multipart_eof_fix
- !ruby/object:RI::MethodSummary 
  name: name
- !ruby/object:RI::MethodSummary 
  name: running?
- !ruby/object:RI::MethodSummary 
  name: select_backend
- !ruby/object:RI::MethodSummary 
  name: setup_signals
- !ruby/object:RI::MethodSummary 
  name: start
- !ruby/object:RI::MethodSummary 
  name: start!
- !ruby/object:RI::MethodSummary 
  name: stop
- !ruby/object:RI::MethodSummary 
  name: stop!
- !ruby/object:RI::MethodSummary 
  name: to_s
name: Server
superclass: Object
